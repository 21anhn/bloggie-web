@page "/blog/{urlHandle}"
@model Bloggie.Web.Pages.Blog.DetailsModel
@{
    ViewData["Title"] = Model.BlogPost.PageTitle;
}
@using Microsoft.AspNetCore.Identity;
@inject UserManager<IdentityUser> userManager;

<div class="container my-5 ">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-6">
            @if (Model.BlogPost != null)
            {
                <h1 class="mb-3">@Model.BlogPost.Heading</h1>

                <div class="d-flex justify-content-between mb-3">
                    <span class="text-secondary">@Model.BlogPost.Author</span>
                    <span class="text-secondary">@Model.BlogPost.PublishedDate.ToShortDateString()</span>
                </div>


                <button type="button" class="btn btn-dark mb-3" onclick="handleLikeClick()">
                    <span id="btnLike">
                        <!--User is not login or is not like-->
                        @if (!Model.IsLiked)
                        {
                            <i class="bi bi-hand-thumbs-up"></i>
                        }
                        else
                        {
                            <i class="bi bi-hand-thumbs-up-fill"></i>
                        }
                    </span>
                    <!--Total likes will be inserted here-->
                    <span id="totalLikes">
                        @Model.TotalLikes
                    </span> like(s)
                </button>

                <div class="mb-3">
                    @if (Model.BlogPost.Tags != null && Model.BlogPost.Tags.Any())
                    {
                        foreach (var tag in Model.BlogPost.Tags)
                        {
                            <a class="text-decoration-none" href="/tags/@tag.Name">
                                <span class="badge bg-dark">@tag.Name</span>
                            </a>
                        }
                    }
                </div>

                <img src="@Model.BlogPost.FeaturedImageUrl" class="d-block img-fluid mb-3" />

                <div class="mb-3 blog-details">
                    @Html.Raw(Model.BlogPost.Content)
                </div>

                <div class="mb-3 card">
                    <div class="card-header">
                        <h5 class="card-title mt-2">Share Your Thoughts</h5>
                    </div>
                    <div class="card-body">
                        <textarea id="commentInput"
                                  class="w-100 form-control px-1"
                                  onclick="openTextEditor()"                                
                                  style="resize: none; height: 100px">
                        </textarea>
                        <div id="buttonGroup" class="d-flex justify-content-end gap-1 mt-2 d-none">
                            <button class="btn btn-dark">Post</button>
                            <button class="btn btn-danger" onclick="closeTextEditor()">Cancel</button>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <h1>Blog post not found!</h1>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const totalLikesElement = document.getElementById('totalLikes');
        const btnLikeElement = document.getElementById('btnLike');
        const btnControl = document.getElementById('buttonGroup');
        var editor;  

        function openTextEditor() {
            editor = new FroalaEditor('#commentInput', {
                imageUploadURL: '/api/images'
            })
            
            //Display button control
            btnControl.classList.remove('d-none');
        }

        function closeTextEditor() {
            if(editor) {
                editor.destroy();
                editor = null;
            }

            document.getElementById('commentInput').value = '';
            //Hiddeen button control
            btnControl.classList.add('d-none');
        }

        function getTotalLikes() {
            fetch('/api/blogpostlike/@Model?.BlogPost?.Id/totalLikes', {
                method: "get",
                headers: {
                    "Content-type": "application/json; charset=UTF-8",
                    "Accept": "*/*"
                }
            })
                .then(response => response.json())
                .then(res => {
                    console.log(res);
                    totalLikesElement.innerHTML = res;
                })
                .catch(err => console.log(err));
        }

        function handleLikeClick() {
            //console.log('ok nhe');
            fetch('/api/blogpostlike/add', {
                method: "post",
                body: JSON.stringify({
                    blogPostId: '@Model?.BlogPost?.Id',
                    userId: `@userManager.GetUserId(User)`
                }),
                headers: {
                    "Content-type": "application/json; charset=UTF-8",
                    "Accept": "*/*"
                }
            })
                .then(response => response.status)
                .then(status => {
                    //console.log(status);
                    //Re-render number of likes
                    if (status === 200) {
                        btnLikeElement.innerHTML = '<i class="bi bi-hand-thumbs-up-fill"></i>';
                        getTotalLikes();
                    }
                })
                .catch(err => console.log(err));
        };
    </script>
}